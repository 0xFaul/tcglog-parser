package tcglog

import (
	"bytes"
	"testing"
)

func TestSystemdEFIStubEventDataEncode(t *testing.T) {
	for _, data := range []struct {
		desc string
		in   SystemdEFIStubEventData
		out  []byte
	}{
		{
			desc: "1",
			in:   SystemdEFIStubEventData{Str: "console=ttyS0 console=tty1 panic=-1 systemd.gpt_auto=0 snapd_recovery_mode=run systemd.debug-shell=1"},
			out: []byte{0x63, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x6f, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x3d, 0x00, 0x74, 0x00, 0x74, 0x00,
				0x79, 0x00, 0x53, 0x00, 0x30, 0x00, 0x20, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x6f, 0x00, 0x6c, 0x00, 0x65,
				0x00, 0x3d, 0x00, 0x74, 0x00, 0x74, 0x00, 0x79, 0x00, 0x31, 0x00, 0x20, 0x00, 0x70, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x69, 0x00,
				0x63, 0x00, 0x3d, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x20, 0x00, 0x73, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6d,
				0x00, 0x64, 0x00, 0x2e, 0x00, 0x67, 0x00, 0x70, 0x00, 0x74, 0x00, 0x5f, 0x00, 0x61, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6f, 0x00,
				0x3d, 0x00, 0x30, 0x00, 0x20, 0x00, 0x73, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x70, 0x00, 0x64, 0x00, 0x5f, 0x00, 0x72, 0x00, 0x65,
				0x00, 0x63, 0x00, 0x6f, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x79, 0x00, 0x5f, 0x00, 0x6d, 0x00, 0x6f, 0x00, 0x64, 0x00,
				0x65, 0x00, 0x3d, 0x00, 0x72, 0x00, 0x75, 0x00, 0x6e, 0x00, 0x20, 0x00, 0x73, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65,
				0x00, 0x6d, 0x00, 0x64, 0x00, 0x2e, 0x00, 0x64, 0x00, 0x65, 0x00, 0x62, 0x00, 0x75, 0x00, 0x67, 0x00, 0x2d, 0x00, 0x73, 0x00,
				0x68, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x3d, 0x00, 0x31, 0x00, 0x00, 0x00},
		},
	} {
		t.Run(data.desc, func(t *testing.T) {
			var buf bytes.Buffer
			if err := data.in.EncodeMeasuredBytes(&buf); err != nil {
				t.Fatalf("Encode failed: %v", err)
			}
			if !bytes.Equal(buf.Bytes(), data.out) {
				t.Errorf("Unexpected encoding")
			}
		})
	}
}
