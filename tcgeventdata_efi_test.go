// Copyright 2019 Canonical Ltd.
// Licensed under the LGPLv3 with static-linking exception.
// See LICENCE file for details.

package tcglog

import (
	"bytes"
	"crypto"
	"testing"

	"github.com/canonical/go-efilib"
)

func TestComputeEFIVariableDataDigest(t *testing.T) {
	for _, data := range []struct {
		desc     string
		alg      crypto.Hash
		name     string
		guid     efi.GUID
		data     []byte
		expected []byte
	}{
		{
			desc: "db",
			alg:  crypto.SHA256,
			name: "db",
			guid: efi.MakeGUID(0xd719b2cb, 0x3d3a, 0x4596, 0xa3bc, [...]uint8{0xda, 0xd0, 0x0e, 0x67, 0x65, 0x6f}),
			data: []byte("foo"),
			expected: []byte{0x87, 0x9e, 0x7e, 0x92, 0x4d, 0xeb, 0xa8, 0x50, 0x19, 0xef, 0xb8, 0xb0,
				0x0a, 0x7b, 0xab, 0x41, 0x25, 0x1d, 0xb2, 0x21, 0x0f, 0xc3, 0xb9, 0x5e, 0xfc, 0x92,
				0x96, 0x77, 0x4a, 0xce, 0x82, 0xbd},
		},
		{
			desc: "dbx",
			alg:  crypto.SHA256,
			name: "dbx",
			guid: efi.MakeGUID(0xd719b2cb, 0x3d3a, 0x4596, 0xa3bc, [...]uint8{0xda, 0xd0, 0x0e, 0x67, 0x65, 0x6f}),
			data: []byte("bar"),
			expected: []byte{0xf0, 0x8f, 0x0a, 0x5a, 0xc0, 0xa8, 0x68, 0xc4, 0x40, 0x8e, 0xd1, 0xba,
				0xed, 0xe4, 0x89, 0x59, 0x19, 0x21, 0x50, 0x63, 0x9f, 0xfe, 0xd1, 0x8c, 0x50, 0x07,
				0x82, 0xd1, 0x09, 0x6b, 0x42, 0xae},
		},
		{
			desc: "sha1",
			alg:  crypto.SHA1,
			name: "db",
			guid: efi.MakeGUID(0xd719b2cb, 0x3d3a, 0x4596, 0xa3bc, [...]uint8{0xda, 0xd0, 0x0e, 0x67, 0x65, 0x6f}),
			data: []byte("foo"),
			expected: []byte{0x1d, 0x49, 0x73, 0x85, 0xc2, 0xbb, 0x2b, 0xbd, 0xe0, 0xc9, 0x43, 0x12,
				0x9f, 0x20, 0x54, 0x63, 0xfb, 0xeb, 0xf5, 0xba},
		},
	} {
		t.Run(data.desc, func(t *testing.T) {
			digest := ComputeEFIVariableDataDigest(data.alg, data.name, data.guid, data.data)
			if !bytes.Equal(digest, data.expected) {
				t.Errorf("Unexpected digest")
			}
		})
	}
}
